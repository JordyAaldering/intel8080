#[repr(u8)]
#[allow(non_camel_case_types)]
pub enum Opcode {
    NOP = 0x00,
    LXI_BC(u8, u8) = 0x01,
    STAX_BC = 0x02,
    INX_BC = 0x03,
    INR_B = 0x04,
    DCR_B = 0x05,
    MVI_B(u8) = 0x06,
    RLC = 0x07,
    DAD_BC = 0x09,
    LDAX_BC = 0x0a,
    DCX_BC = 0x0b,
    INR_C = 0x0c,
    DCR_C = 0x0d,
    MVI_C(u8) = 0x0e,
    RRC = 0x0f,
    LXI_DE(u8, u8) = 0x11,
    STAX_DE = 0x12,
    INX_DE = 0x13,
    INR_D = 0x14,
    DCR_D = 0x15,
    MVI_D(u8) = 0x16,
    RAL = 0x17,
    DAD_DE = 0x19,
    LDAX_DE = 0x1a,
    DCX_DE = 0x1b,
    INR_E = 0x1c,
    DCR_E = 0x1d,
    MVI_E(u8) = 0x1e,
    RAR = 0x1f,
    LXI_HL(u8, u8) = 0x21,
    SHLD(u16) = 0x22,
    INX_HL = 0x23,
    INR_H = 0x24,
    DCR_H = 0x25,
    MVI_H(u8) = 0x26,
    DAA = 0x27,
    DAD_HL = 0x29,
    LHLD(u16) = 0x2a,
    DCX_HL = 0x2b,
    INR_L = 0x2c,
    DCR_L = 0x2d,
    MVI_L(u8) = 0x2e,
    CMA = 0x2f,
    LXI_SP(u8, u8) = 0x31,
    STA(u16) = 0x32,
    INX_SP = 0x33,
    INR_M = 0x34,
    DCR_M = 0x35,
    MVI_M(u8) = 0x36,
    STC = 0x37,
    DAD_SP = 0x39,
    LDA(u16) = 0x3a,
    DCX_SP = 0x3b,
    INR_A = 0x3c,
    DCR_A = 0x3d,
    MVI_A(u8) = 0x3e,
    CMC = 0x3f,
    MOV_BB = 0x40,
    MOV_BC = 0x41,
    MOV_BD = 0x42,
    MOV_BE = 0x43,
    MOV_BH = 0x44,
    MOV_BL = 0x45,
    MOV_BM = 0x46,
    MOV_BA = 0x47,
    MOV_CB = 0x48,
    MOV_CC = 0x49,
    MOV_CD = 0x4a,
    MOV_CE = 0x4b,
    MOV_CH = 0x4c,
    MOV_CL = 0x4d,
    MOV_CM = 0x4e,
    MOV_CA = 0x4f,
    MOV_DB = 0x50,
    MOV_DC = 0x51,
    MOV_DD = 0x52,
    MOV_DE = 0x53,
    MOV_DH = 0x54,
    MOV_DL = 0x55,
    MOV_DM = 0x56,
    MOV_DA = 0x57,
    MOV_EB = 0x58,
    MOV_EC = 0x59,
    MOV_ED = 0x5a,
    MOV_EE = 0x5b,
    MOV_EH = 0x5c,
    MOV_EL = 0x5d,
    MOV_EM = 0x5e,
    MOV_EA = 0x5f,
    MOV_HB = 0x60,
    MOV_HC = 0x61,
    MOV_HD = 0x62,
    MOV_HE = 0x63,
    MOV_HH = 0x64,
    MOV_HL = 0x65,
    MOV_HM = 0x66,
    MOV_HA = 0x67,
    MOV_LB = 0x68,
    MOV_LC = 0x69,
    MOV_LD = 0x6a,
    MOV_LE = 0x6b,
    MOV_LH = 0x6c,
    MOV_LL = 0x6d,
    MOV_LM = 0x6e,
    MOV_LA = 0x6f,
    MOV_MB = 0x70,
    MOV_MC = 0x71,
    MOV_MD = 0x72,
    MOV_ME = 0x73,
    MOV_MH = 0x74,
    MOV_ML = 0x75,
    HLT = 0x76,
    MOV_MA = 0x77,
    MOV_AB = 0x78,
    MOV_AC = 0x79,
    MOV_AD = 0x7a,
    MOV_AE = 0x7b,
    MOV_AH = 0x7c,
    MOV_AL = 0x7d,
    MOV_AM = 0x7e,
    MOV_AA = 0x7f,
    ADD_B = 0x80,
    ADD_C = 0x81,
    ADD_D = 0x82,
    ADD_E = 0x83,
    ADD_H = 0x84,
    ADD_L = 0x85,
    ADD_M = 0x86,
    ADD_A = 0x87,
    ADC_B = 0x88,
    ADC_C = 0x89,
    ADC_D = 0x8a,
    ADC_E = 0x8b,
    ADC_H = 0x8c,
    ADC_L = 0x8d,
    ADC_M = 0x8e,
    ADC_A = 0x8f,
    SUB_B = 0x90,
    SUB_C = 0x91,
    SUB_D = 0x92,
    SUB_E = 0x93,
    SUB_H = 0x94,
    SUB_L = 0x95,
    SUB_M = 0x96,
    SUB_A = 0x97,
    SBB_B = 0x98,
    SBB_C = 0x99,
    SBB_D = 0x9a,
    SBB_E = 0x9b,
    SBB_H = 0x9c,
    SBB_L = 0x9d,
    SBB_M = 0x9e,
    SBB_A = 0x9f,
    ANA_B = 0xa0,
    ANA_C = 0xa1,
    ANA_D = 0xa2,
    ANA_E = 0xa3,
    ANA_H = 0xa4,
    ANA_L = 0xa5,
    ANA_M = 0xa6,
    ANA_A = 0xa7,
    XRA_B = 0xa8,
    XRA_C = 0xa9,
    XRA_D = 0xaa,
    XRA_E = 0xab,
    XRA_H = 0xac,
    XRA_L = 0xad,
    XRA_M = 0xae,
    XRA_A = 0xaf,
    ORA_B = 0xb0,
    ORA_C = 0xb1,
    ORA_D = 0xb2,
    ORA_E = 0xb3,
    ORA_H = 0xb4,
    ORA_L = 0xb5,
    ORA_M = 0xb6,
    ORA_A = 0xb7,
    CMP_B = 0xb8,
    CMP_C = 0xb9,
    CMP_D = 0xba,
    CMP_E = 0xbb,
    CMP_H = 0xbc,
    CMP_L = 0xbd,
    CMP_M = 0xbe,
    CMP_A = 0xbf,
    RNZ = 0xc0,
    POP_BC = 0xc1,
    JNZ(u16) = 0xc2,
    JMP(u16) = 0xc3,
    CNZ(u16) = 0xc4,
    PUSH_BC = 0xc5,
    ADI(u8) = 0xc6,
    RST_0 = 0xc7,
    RZ = 0xc8,
    RET = 0xc9,
    JZ(u16) = 0xca,
    CZ(u16) = 0xcc,
    CALL(u16) = 0xcd,
    ACI(u8) = 0xce,
    RST_1 = 0xcf,
    RNC = 0xd0,
    POP_DE = 0xd1,
    JNC(u16) = 0xd2,
    OUT(u8) = 0xd3,
    CNC(u16) = 0xd4,
    PUSH_DE = 0xd5,
    SUI(u8) = 0xd6,
    RST_2 = 0xd7,
    RC = 0xd8,
    JC(u16) = 0xda,
    IN(u8) = 0xdb,
    CC(u16) = 0xdc,
    SBI(u8) = 0xde,
    RST_3 = 0xdf,
    RPO = 0xe0,
    POP_HL = 0xe1,
    JPO(u16) = 0xe2,
    XTHL = 0xe3,
    CPO(u16) = 0xe4,
    PUSH_HL = 0xe5,
    ANI(u8) = 0xe6,
    RST_4 = 0xe7,
    RPE = 0xe8,
    PCHL = 0xe9,
    JPE(u16) = 0xea,
    XCHG = 0xeb,
    CPE(u16) = 0xec,
    XRI(u8) = 0xee,
    RST_5 = 0xef,
    RP = 0xf0,
    POP_PSW = 0xf1,
    JP(u16) = 0xf2,
    DI = 0xf3,
    CP(u16) = 0xf4,
    PUSH_PSW = 0xf5,
    ORI(u8) = 0xf6,
    RST_6 = 0xf7,
    RM = 0xf8,
    SPHL = 0xf9,
    JM(u16) = 0xfa,
    EI = 0xfb,
    CM(u16) = 0xfc,
    CPI(u8) = 0xfe,
    RST_7 = 0xff,
}

impl std::fmt::Debug for Opcode {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Opcode::NOP => f.write_str("NOP"),
            Opcode::LXI_BC(rl, rh) => f.write_fmt(format_args!("LXI BC,{:#06x}{:04x}", rl, rh)),
            Opcode::STAX_BC => f.write_str("STAX B"),
            Opcode::INX_BC => f.write_str("INX B"),
            Opcode::INR_B => f.write_str("INR B"),
            Opcode::DCR_B => f.write_str("DCR B"),
            Opcode::MVI_B(d8) => f.write_fmt(format_args!("MVI B,{:#06x}", d8)),
            Opcode::RLC => f.write_str("RLC"),
            Opcode::DAD_BC => f.write_str("DAD B"),
            Opcode::LDAX_BC => f.write_str("LDAX B"),
            Opcode::DCX_BC => f.write_str("DCX B"),
            Opcode::INR_C => f.write_str("INR C"),
            Opcode::DCR_C => f.write_str("DCR C"),
            Opcode::MVI_C(d8) => f.write_fmt(format_args!("MVI C,{:#06x}", d8)),
            Opcode::RRC => f.write_str("RRC"),
            Opcode::LXI_DE(rl, rh) => f.write_fmt(format_args!("LXI DE,{:#06x}{:04x}", rl, rh)),
            Opcode::STAX_DE => f.write_str("STAX D"),
            Opcode::INX_DE => f.write_str("INX D"),
            Opcode::INR_D => f.write_str("INR D"),
            Opcode::DCR_D => f.write_str("DCR D"),
            Opcode::MVI_D(d8) => f.write_fmt(format_args!("MVI D,{:#06x}", d8)),
            Opcode::RAL => f.write_str("RAL"),
            Opcode::DAD_DE => f.write_str("DAD D"),
            Opcode::LDAX_DE => f.write_str("LDAX D"),
            Opcode::DCX_DE => f.write_str("DCX D"),
            Opcode::INR_E => f.write_str("INR E"),
            Opcode::DCR_E => f.write_str("DCR E"),
            Opcode::MVI_E(d8) => f.write_fmt(format_args!("MVI E,{:#06x}", d8)),
            Opcode::RAR => f.write_str("RAR"),
            Opcode::LXI_HL(rl, rh) => f.write_fmt(format_args!("LXI HL,{:#06x}{:04x}", rl, rh)),
            Opcode::SHLD(adr) => f.write_fmt(format_args!("SHLD {:#010x}", adr)),
            Opcode::INX_HL => f.write_str("INX H"),
            Opcode::INR_H => f.write_str("INR H"),
            Opcode::DCR_H => f.write_str("DCR H"),
            Opcode::MVI_H(d8) => f.write_fmt(format_args!("MVI {:#06x}", d8)),
            Opcode::DAA => f.write_str("DDA"),
            Opcode::DAD_HL => f.write_str("DAD H"),
            Opcode::LHLD(adr) => f.write_fmt(format_args!("LHLD {:#010x}", adr)),
            Opcode::DCX_HL => f.write_str("DCX H"),
            Opcode::INR_L => f.write_str("INR L"),
            Opcode::DCR_L => f.write_str("DCR L"),
            Opcode::MVI_L(d8) => f.write_fmt(format_args!("MVI L,{:#06x}", d8)),
            Opcode::CMA => f.write_str("CMA"),
            Opcode::LXI_SP(rl, rh) => f.write_fmt(format_args!("LXI SP,{:#06x}{:04x}", rh, rl)),
            Opcode::STA(adr) => f.write_fmt(format_args!("STA {:#010x}", adr)),
            Opcode::INX_SP => f.write_str("INX SP"),
            Opcode::INR_M => f.write_str("INR M"),
            Opcode::DCR_M => f.write_str("DCR M"),
            Opcode::MVI_M(d8) => f.write_fmt(format_args!("MVI M,{:#06x}", d8)),
            Opcode::STC => f.write_str("STC"),
            Opcode::DAD_SP => f.write_str("DAD SP"),
            Opcode::LDA(adr) => f.write_fmt(format_args!("LDA {:#010x}", adr)),
            Opcode::DCX_SP => f.write_str("DCX SP"),
            Opcode::INR_A => f.write_str("INR A"),
            Opcode::DCR_A => f.write_str("DCR A"),
            Opcode::MVI_A(d8) => f.write_fmt(format_args!("MVI A,{:#06x}", d8)),
            Opcode::CMC => f.write_str("CMC"),
            Opcode::MOV_BB => f.write_str("MOV B,B"),
            Opcode::MOV_BC => f.write_str("MOV B,C"),
            Opcode::MOV_BD => f.write_str("MOV B,D"),
            Opcode::MOV_BE => f.write_str("MOV B,E"),
            Opcode::MOV_BH => f.write_str("MOV B,H"),
            Opcode::MOV_BL => f.write_str("MOV B,L"),
            Opcode::MOV_BM => f.write_str("MOV B,M"),
            Opcode::MOV_BA => f.write_str("MOV B,A"),
            Opcode::MOV_CB => f.write_str("MOV C,B"),
            Opcode::MOV_CC => f.write_str("MOV C,C"),
            Opcode::MOV_CD => f.write_str("MOV C,D"),
            Opcode::MOV_CE => f.write_str("MOV C,E"),
            Opcode::MOV_CH => f.write_str("MOV C,H"),
            Opcode::MOV_CL => f.write_str("MOV C,L"),
            Opcode::MOV_CM => f.write_str("MOV C,M"),
            Opcode::MOV_CA => f.write_str("MOV C,A"),
            Opcode::MOV_DB => f.write_str("MOV D,B"),
            Opcode::MOV_DC => f.write_str("MOV D,C"),
            Opcode::MOV_DD => f.write_str("MOV D,D"),
            Opcode::MOV_DE => f.write_str("MOV D,E"),
            Opcode::MOV_DH => f.write_str("MOV D,H"),
            Opcode::MOV_DL => f.write_str("MOV D,L"),
            Opcode::MOV_DM => f.write_str("MOV D,M"),
            Opcode::MOV_DA => f.write_str("MOV D,A"),
            Opcode::MOV_EB => f.write_str("MOV E,B"),
            Opcode::MOV_EC => f.write_str("MOV E,C"),
            Opcode::MOV_ED => f.write_str("MOV E,D"),
            Opcode::MOV_EE => f.write_str("MOV E,E"),
            Opcode::MOV_EH => f.write_str("MOV E,H"),
            Opcode::MOV_EL => f.write_str("MOV E,L"),
            Opcode::MOV_EM => f.write_str("MOV E,M"),
            Opcode::MOV_EA => f.write_str("MOV E,A"),
            Opcode::MOV_HB => f.write_str("MOV H,B"),
            Opcode::MOV_HC => f.write_str("MOV H,C"),
            Opcode::MOV_HD => f.write_str("MOV H,D"),
            Opcode::MOV_HE => f.write_str("MOV H,E"),
            Opcode::MOV_HH => f.write_str("MOV H,H"),
            Opcode::MOV_HL => f.write_str("MOV H,L"),
            Opcode::MOV_HM => f.write_str("MOV H,M"),
            Opcode::MOV_HA => f.write_str("MOV H,A"),
            Opcode::MOV_LB => f.write_str("MOV L,B"),
            Opcode::MOV_LC => f.write_str("MOV L,C"),
            Opcode::MOV_LD => f.write_str("MOV L,D"),
            Opcode::MOV_LE => f.write_str("MOV L,E"),
            Opcode::MOV_LH => f.write_str("MOV L,H"),
            Opcode::MOV_LL => f.write_str("MOV L,L"),
            Opcode::MOV_LM => f.write_str("MOV L,M"),
            Opcode::MOV_LA => f.write_str("MOV L,A"),
            Opcode::MOV_MB => f.write_str("MOV M,B"),
            Opcode::MOV_MC => f.write_str("MOV M,C"),
            Opcode::MOV_MD => f.write_str("MOV M,D"),
            Opcode::MOV_ME => f.write_str("MOV M,E"),
            Opcode::MOV_MH => f.write_str("MOV M,H"),
            Opcode::MOV_ML => f.write_str("MOV M,L"),
            Opcode::HLT => f.write_str("HLT"),
            Opcode::MOV_MA => f.write_str("MOV M,A"),
            Opcode::MOV_AB => f.write_str("MOV A,B"),
            Opcode::MOV_AC => f.write_str("MOV A,C"),
            Opcode::MOV_AD => f.write_str("MOV A,D"),
            Opcode::MOV_AE => f.write_str("MOV A,E"),
            Opcode::MOV_AH => f.write_str("MOV A,H"),
            Opcode::MOV_AL => f.write_str("MOV A,L"),
            Opcode::MOV_AM => f.write_str("MOV A,M"),
            Opcode::MOV_AA => f.write_str("MOV A,A"),
            Opcode::ADD_B => f.write_str("ADD B"),
            Opcode::ADD_C => f.write_str("ADD C"),
            Opcode::ADD_D => f.write_str("ADD D"),
            Opcode::ADD_E => f.write_str("ADD E"),
            Opcode::ADD_H => f.write_str("ADD H"),
            Opcode::ADD_L => f.write_str("ADD L"),
            Opcode::ADD_M => f.write_str("ADD M"),
            Opcode::ADD_A => f.write_str("ADD A"),
            Opcode::ADC_B => f.write_str("ADC B"),
            Opcode::ADC_C => f.write_str("ADC C"),
            Opcode::ADC_D => f.write_str("ADC D"),
            Opcode::ADC_E => f.write_str("ADC E"),
            Opcode::ADC_H => f.write_str("ADC H"),
            Opcode::ADC_L => f.write_str("ADC L"),
            Opcode::ADC_M => f.write_str("ADC M"),
            Opcode::ADC_A => f.write_str("ADC A"),
            Opcode::SUB_B => f.write_str("SUB B"),
            Opcode::SUB_C => f.write_str("SUB C"),
            Opcode::SUB_D => f.write_str("SUB D"),
            Opcode::SUB_E => f.write_str("SUB E"),
            Opcode::SUB_H => f.write_str("SUB H"),
            Opcode::SUB_L => f.write_str("SUB L"),
            Opcode::SUB_M => f.write_str("SUB M"),
            Opcode::SUB_A => f.write_str("SUB A"),
            Opcode::SBB_B => f.write_str("SBB B"),
            Opcode::SBB_C => f.write_str("SBB C"),
            Opcode::SBB_D => f.write_str("SBB D"),
            Opcode::SBB_E => f.write_str("SBB E"),
            Opcode::SBB_H => f.write_str("SBB H"),
            Opcode::SBB_L => f.write_str("SBB L"),
            Opcode::SBB_M => f.write_str("SBB M"),
            Opcode::SBB_A => f.write_str("SBB A"),
            Opcode::ANA_B => f.write_str("ANA B"),
            Opcode::ANA_C => f.write_str("ANA C"),
            Opcode::ANA_D => f.write_str("ANA D"),
            Opcode::ANA_E => f.write_str("ANA E"),
            Opcode::ANA_H => f.write_str("ANA H"),
            Opcode::ANA_L => f.write_str("ANA L"),
            Opcode::ANA_M => f.write_str("ANA M"),
            Opcode::ANA_A => f.write_str("ANA A"),
            Opcode::XRA_B => f.write_str("XRA B"),
            Opcode::XRA_C => f.write_str("XRA C"),
            Opcode::XRA_D => f.write_str("XRA D"),
            Opcode::XRA_E => f.write_str("XRA E"),
            Opcode::XRA_H => f.write_str("XRA H"),
            Opcode::XRA_L => f.write_str("XRA L"),
            Opcode::XRA_M => f.write_str("XRA M"),
            Opcode::XRA_A => f.write_str("XRA A"),
            Opcode::ORA_B => f.write_str("ORA B"),
            Opcode::ORA_C => f.write_str("ORA C"),
            Opcode::ORA_D => f.write_str("ORA D"),
            Opcode::ORA_E => f.write_str("ORA E"),
            Opcode::ORA_H => f.write_str("ORA H"),
            Opcode::ORA_L => f.write_str("ORA L"),
            Opcode::ORA_M => f.write_str("ORA M"),
            Opcode::ORA_A => f.write_str("ORA A"),
            Opcode::CMP_B => f.write_str("CMP B"),
            Opcode::CMP_C => f.write_str("CMP C"),
            Opcode::CMP_D => f.write_str("CMP D"),
            Opcode::CMP_E => f.write_str("CMP E"),
            Opcode::CMP_H => f.write_str("CMP H"),
            Opcode::CMP_L => f.write_str("CMP L"),
            Opcode::CMP_M => f.write_str("CMP M"),
            Opcode::CMP_A => f.write_str("CMP A"),
            Opcode::RNZ => f.write_str("RNZ"),
            Opcode::POP_BC => f.write_str("POP B"),
            Opcode::JNZ(adr) => f.write_fmt(format_args!("JNZ {:#010x}", adr)),
            Opcode::JMP(adr) => f.write_fmt(format_args!("JMP {:#010x}", adr)),
            Opcode::CNZ(adr) => f.write_fmt(format_args!("CNZ {:#010x}", adr)),
            Opcode::PUSH_BC => f.write_str("PUSH B"),
            Opcode::ADI(d8)  => f.write_fmt(format_args!("ADI {:#06x}", d8)),
            Opcode::RST_0 => f.write_str("RST 0"),
            Opcode::RZ => f.write_str("RZ"),
            Opcode::RET => f.write_str("RET"),
            Opcode::JZ(adr) => f.write_fmt(format_args!("JZ {:#010x}", adr)),
            Opcode::CZ(adr) => f.write_fmt(format_args!("CZ {:#010x}", adr)),
            Opcode::CALL(adr) => f.write_fmt(format_args!("CALL {:#010x}", adr)),
            Opcode::ACI(d8) => f.write_fmt(format_args!("ACI {:#06x}", d8)),
            Opcode::RST_1 => f.write_str("RST 1"),
            Opcode::RNC => f.write_str("RNC"),
            Opcode::POP_DE => f.write_str("POP D"),
            Opcode::JNC(adr) => f.write_fmt(format_args!("JNC {:#010x}", adr)),
            Opcode::OUT(d8) => f.write_fmt(format_args!("OUT {:#06x}", d8)),
            Opcode::CNC(adr) => f.write_fmt(format_args!("CNC {:#010x}", adr)),
            Opcode::PUSH_DE => f.write_str("PUSH D"),
            Opcode::SUI(d8)  => f.write_fmt(format_args!("SUI {:#06x}", d8)),
            Opcode::RST_2 => f.write_str("RST 2"),
            Opcode::RC => f.write_str("RC"),
            Opcode::JC(adr) => f.write_fmt(format_args!("JC {:#010x}", adr)),
            Opcode::IN(d8) => f.write_fmt(format_args!("IN {:#06x}", d8)),
            Opcode::CC(adr) => f.write_fmt(format_args!("CC {:#010x}", adr)),
            Opcode::SBI(d8) => f.write_fmt(format_args!("SBI {:#06x}", d8)),
            Opcode::RST_3 => f.write_str("RST 3"),
            Opcode::RPO => f.write_str("RP 0"),
            Opcode::POP_HL => f.write_str("POP H"),
            Opcode::JPO(adr) => f.write_fmt(format_args!("JPO {:#010x}", adr)),
            Opcode::XTHL => f.write_str("XTHL"),
            Opcode::CPO(adr) => f.write_fmt(format_args!("CPO {:#010x}", adr)),
            Opcode::PUSH_HL => f.write_str("PUSH H"),
            Opcode::ANI(d8)  => f.write_fmt(format_args!("ANI {:#06x}", d8)),
            Opcode::RST_4 => f.write_str("RST 4"),
            Opcode::RPE => f.write_str("RPE"),
            Opcode::PCHL => f.write_str("PCHL"),
            Opcode::JPE(adr) => f.write_fmt(format_args!("JPE {:#010x}", adr)),
            Opcode::XCHG => f.write_str("XCHG"),
            Opcode::CPE(adr) => f.write_fmt(format_args!("CPE {:#010x}", adr)),
            Opcode::XRI(d8)  => f.write_fmt(format_args!("XRI {:#06x}", d8)),
            Opcode::RST_5 => f.write_str("RST 5"),
            Opcode::RP => f.write_str("RP"),
            Opcode::POP_PSW => f.write_str("POP PSW"),
            Opcode::JP(adr) => f.write_fmt(format_args!("JP {:#010x}", adr)),
            Opcode::DI => f.write_str("DI"),
            Opcode::CP(adr) => f.write_fmt(format_args!("CP {:#010x}", adr)),
            Opcode::PUSH_PSW => f.write_str("PUSH PSW"),
            Opcode::ORI(d8) => f.write_fmt(format_args!("ORI {:#06x}", d8)),
            Opcode::RST_6 => f.write_str("RST 6"),
            Opcode::RM => f.write_str("RM"),
            Opcode::SPHL => f.write_str("SPHL"),
            Opcode::JM(adr) => f.write_fmt(format_args!("JM {:#010x}", adr)),
            Opcode::EI => f.write_str("EI"),
            Opcode::CM(adr) => f.write_fmt(format_args!("CM {:#010x}", adr)),
            Opcode::CPI(d8) => f.write_fmt(format_args!("CPI {:#06x}", d8)),
            Opcode::RST_7 => f.write_str("RST 7"),
        }
    }
}
